#pragma once
#include <iostream>
using  std::istream;
using  std::ostream;
class CMyPoint
{
	int x, y;
public:
	CMyPoint();
	CMyPoint(int x, int y);
	~CMyPoint();
	//双目运算符：
	//理解为this指的对象，调用了+运算符，+p1这个参数
	CMyPoint operator+(CMyPoint const & p1) const;
	//友元，两个对象进行了-的运算符操作
	friend CMyPoint operator-(CMyPoint const & p1, CMyPoint const & p2);
	//&的目的是优化拷贝，因为赋值是结果为自己，发生内存拷贝，&只发生值拷贝优化
	//形参到实参发生一次值拷贝，函数返回的时候发生值拷贝，x，y为8字节，用&节约了4字节	
	CMyPoint & operator=(CMyPoint const & SrcPos);
	CMyPoint & operator+=(CMyPoint const & SrcPos);


	//单目运算符：

	//重载负号
	CMyPoint & operator-();
   //重载前置++
	CMyPoint & operator++();
	//重载后置++,这个int不是参数，区分前置和后置的作用
	CMyPoint operator++(int);

	//友元来描述输入输出
	friend  istream& operator>>(istream	&is,CMyPoint &pt)
	{
		is >> pt.x >> pt.y;
		return is;
	}

	friend ostream& operator<<(ostream &os, CMyPoint const &pt)
	{
		os << pt.x << pt.y;
		return os;
	}
};


#include "MyPoint.h"


CMyPoint::CMyPoint()
{
}


CMyPoint::~CMyPoint()
{
}

CMyPoint::CMyPoint(int x, int y)
{
	x = x;
	y = y;
}
CMyPoint CMyPoint::operator+(CMyPoint const & p1) const
{

	CMyPoint tempPos;
	tempPos.x = x + p1.x;
	tempPos.y = y + p1.y;
	return tempPos;

}


CMyPoint operator-(CMyPoint const &p1,CMyPoint const & p2)
{
	CMyPoint tempPos;
	tempPos.x = p1.x - p2.x;
	tempPos.y = p1.y - p2.y;
	return tempPos;

}

CMyPoint & CMyPoint::operator=(CMyPoint const & SrcPos)
{

	this->x = SrcPos.x;
	this->y = SrcPos.y;
	return *this;
}

CMyPoint & CMyPoint::operator+=(CMyPoint const & SrcPos)
{
	CMyPoint tempPos = *this + SrcPos;
	return *this = tempPos;
}

CMyPoint & CMyPoint::operator-()
{
	x = -x;
	y = -y;
	return *this;
}

CMyPoint & CMyPoint::operator++()
{
	++x;
	++y;
	return *this;
}

CMyPoint CMyPoint::operator++(int)
{

	CMyPoint temp = *this;
	x++;
	y++;
	return temp;

}

#include "MyPoint.h"
using std::cin;
using std::cout;
int main()
{
	/*int a = 4407873;
	printf("%d", (char*)&a);*/

	CMyPoint p1(1,2), p2(2,3);

	cin >> p1;
	cout << p1;
		
	return 0;
}

