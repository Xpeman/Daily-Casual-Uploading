/*

申请内存：new 
（1）new是C++关键字，需要编译器支持；malloc是库函数，需要头文件支持。
（2）使用new操作符申请内存分配时无须指定内存块的大小，编译器会根据类型信息自行计算。而malloc则需要显式地指出所需内存的尺寸。
（3）new操作符内存分配成功时，返回的是对象类型的指针，类型严格与对象匹配，
     无须进行类型转换，故new是符合类型安全性的操作符。
      而malloc内存分配成功则是返回void * ，需要通过强制类型转换将void*指针转换成我们需要的类型。
释放内存：delete 

申请内存：malloc	calloc  realloc 
释放内存：free

*/
#include <stdio.h>
#include <stdlib.h>
int main()
{

	//C内存分配函数，设计的目的是分配单个内存
	int *p =(int *)malloc(sizeof(int));
	free(p);
	int *p4 = new int;//这个和上面这个一样的，类型于c动态分配单个内存malloc ,内存没有数据进行拷贝
	delete p4;//类似于c的free(p)

	//p =(int *) malloc(sizeof(int)*4);
	//C内存分配函数，设计的目的是分配多个连续内存
	int *p1 = (int *)calloc(sizeof(int), 4);
	free(p1);
	int *p5 = new int[4];//这个和calloc上面这个一样的，类型于c动态分配多个连续内存calloc，内存没有初始化数据
	delete[]p5;//类似于c的free(p1)

	int *p6 = new int(3);//分配单个内存，并有3数据拷贝进这个内存

	//数据在内存中没有数据类型,利用malloc申请三个内存区域
	int *p2 = (int *)malloc(sizeof(int)* 4);
	free(p2);

	int *p3 = (int *)calloc(sizeof(int), 1);
	free(p3);

	//new的两种用法：
	//1.分配单个动态内存 (1)分配单个内存不初始化 （2）分配多个内存且圆括号加初始值
	//2.动态分配多个内存且不初始化
	//delete的两种用法：
	//1.new分配的单个内存直接delete
	//2.new分配的多个连续内存，delete[]p;
	//new分配只能delete释放
	//C++的内存动态内存分配只能free释放
	//C++的内存动态分配以及释放-》运算符 new delete
	//C的内存动态分配以及释放-》函数 malloc calloc


	return  0;
}