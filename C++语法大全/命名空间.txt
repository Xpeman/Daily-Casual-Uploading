/*
命名空间 关键字 namespace
作用：充当成仓库的作用，可以在仓库里准备各种各样的工具，相当于在命名空间定义不同的各种各样的数据和函数，结构等等

命名空间一般在头文件中写

{}的作用：
（1）作用域  仅仅表示一个作用区间 可加可不加分号
（2）定义域  定义域后面都需要加分号 比如数据 结构体 等等




*/
#include "MyMath.h"//调用头文件也会展开MyMath，a也会初始化一次，所以要把.h里的a定义成static或者extern才行 
//using指示：指示MyMath这个空间里的所有标识符可见
using namespace MyMaths;//把MyMath空间里的代码全都定义一遍公开，a也会初始化一次
using namespace MyMaths::MyMathss;//这样写更安全，要用空间里的那个数据就公开哪个，这样就只公开MyMaths里的MyMathss空间里的数据
using MyMaths::MyMathss::English;//公开MyMaths里的MyMathss里的English结构体
int main()
{
	


	Speak();




	return  0;
}

#include <iostream>
using namespace std;
namespace MyMaths
{
	
	//不加extern会报错，extern表示变量是一个已经定义的外部变量
	//原因是因为在主函数中，using namespace MyMath就会把这个a对外公开可见
	//然后调用了这个MyMath头文件又会展开一次这个头文件的代码，a又对外公开一次所以会重定义
	extern int a;//a为外部变量已定义
	static int b;//b只会初始化一次
	namespace MyMathss
	{

		struct English
		{
			int Word_Num;
			char* NeiRong;
			struct WenZhang
			{
				char * zhangsan;
			};


		};

	}
	void Speak();//函数的定义需要在.cpp文件里定义，头文件不参与编译

	
}



